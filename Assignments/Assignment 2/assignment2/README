Shang-Ian Tan, a1818695 - 2024.05.06
 * Timing code has been added.
 * Timing code will compute the elapsed time of the matrix-vector multiplication in
 * each process and then the maximum elapse time of all processes.

Purpose:  Calculate and collect timings of a number of vector multiplications
 *
 * Compile:  mpicc -g -Wall -o mvmult mvmult.c
 * Run:      mpirun -n <number of processes> ./mvmult
 *
 * Input:    Dimensions of the matrix (m = number of rows, n
 *              = number of columns)
 * Output:   Elapsed time for execution of the multiplication, to be collected for analysis

 Analysis Methodology
    1. Instrumentation: 
        Timings of matrix multiplications were collected using MPI timing functions, strategically placed before and after the call to `Mat_vect_mult()`. The following are the functions used:
            i. `MPI_Barrier()`: Placed before, to stop the program until all processes reach this point. (Line 81)
            ii. `MPI_Wtime()`: Placed before & after, to begin and end timing respectively. (Lines 82 & 86)
            iii. `MPI_Reduce()`: Placed after, to reduce the computed local elapsed times from each process, keeping the longest time of all. (Line 95)

    2. Data Collection: 
        Timings were collected for 1, 2, and 4 processors across varying matrix sizes. The fastest of 3 calls to the program for each combination of processor count & matrix size was taken. This was done as program runtime could have been affected by any unrelated processes running in the background. The assumption is that the fastest time is derived from the program call which was the least affected by such unrelated processes. The initial order of matrix was set at 16, and adjustments were made to find a suitable maximum size based on program response, which ended at size 2048, as efficiency began to plateau.


Additional Files:
    Makefile - Used for easier compilation and initial serial testing.
    test_script.sh - Used to automate testing procedure and with higher accuracy.
    mvmult - Binary executable provided for testing purposes.